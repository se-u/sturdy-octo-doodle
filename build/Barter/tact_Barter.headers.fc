;;
;; Header files for Barter
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_set_slice_int
(cell, ()) __tact_dict_set_slice_int(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_set_slice_uint
(cell, ()) __tact_dict_set_slice_uint(cell d, int kl, slice k, int v, int vl) inline;

;; __tact_dict_get_slice_uint
int __tact_dict_get_slice_uint(cell d, int kl, slice k, int vl) inline;

;; __tact_dict_set_slice_cell
(cell, ()) __tact_dict_set_slice_cell(cell d, int kl, slice k, cell v) inline;

;; __tact_dict_get_slice_cell
cell __tact_dict_get_slice_cell(cell d, int kl, slice k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $SendBottle$_store
builder $SendBottle$_store(builder build_0, (slice, slice, slice, int) v) inline;

;; $SendBottle$_store_cell
cell $SendBottle$_store_cell((slice, slice, slice, int) v) inline;

;; $SendBottle$_not_null
((slice, slice, slice, int)) $SendBottle$_not_null(tuple v) inline;

;; $SendBottle$_store_opt
cell $SendBottle$_store_opt(tuple v) inline;

;; $SendBottle$_load
(slice, ((slice, slice, slice, int))) $SendBottle$_load(slice sc_0) inline;

;; $SendBottle$_as_optional
tuple $SendBottle$_as_optional((slice, slice, slice, int) v) inline;

;; $SendBottle$_load_opt
tuple $SendBottle$_load_opt(cell cl) inline;

;; $ArgSendBottle$_load
(slice, ((slice, slice, slice, int))) $ArgSendBottle$_load(slice sc_0) inline;

;; $ArgVerifyBottle$_load
(slice, ((slice, slice, int))) $ArgVerifyBottle$_load(slice sc_0) inline;

;; $BagItem$_store
builder $BagItem$_store(builder build_0, (int, int, slice, slice, int, int) v) inline_ref;

;; $BagItem$_store_cell
cell $BagItem$_store_cell((int, int, slice, slice, int, int) v) inline;

;; $ArgBagItem$_load
(slice, ((int, int, slice, slice, int, int))) $ArgBagItem$_load(slice sc_0) inline_ref;

;; $Master$_store
builder $Master$_store(builder build_0, (slice, slice, int, int) v) inline;

;; $Master$_store_cell
cell $Master$_store_cell((slice, slice, int, int) v) inline;

;; $Master$_load
(slice, ((slice, slice, int, int))) $Master$_load(slice sc_0) inline;

;; $Master$_as_optional
tuple $Master$_as_optional((slice, slice, int, int) v) inline;

;; $Master$_load_opt
tuple $Master$_load_opt(cell cl) inline;

;; $ArgAddMaster$_load
(slice, ((slice, slice, slice, int, int))) $ArgAddMaster$_load(slice sc_0) inline;

;; $Bags$_store
builder $Bags$_store(builder build_0, (slice) v) inline;

;; $Bags$_store_cell
cell $Bags$_store_cell((slice) v) inline;

;; $Bags$_load
(slice, ((slice))) $Bags$_load(slice sc_0) inline;

;; $Bags$_as_optional
tuple $Bags$_as_optional((slice) v) inline;

;; $Bags$_load_opt
tuple $Bags$_load_opt(cell cl) inline;

;; $ArgAddUserBag$_load
(slice, ((slice, slice))) $ArgAddUserBag$_load(slice sc_0) inline;

;; $Barter$_store
builder $Barter$_store(builder build_0, (cell, cell, cell, cell, cell, cell) v) inline;

;; $Barter$_load
(slice, ((cell, cell, cell, cell, cell, cell))) $Barter$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Bags$_not_null
((slice)) $Bags$_not_null(tuple v) inline;

;; $Bags$_to_external
(slice) $Bags$_to_external(((slice)) v) inline;

;; $Master$_constructor_name_camp_phone_status
((slice, slice, int, int)) $Master$_constructor_name_camp_phone_status(slice name, slice camp, int phone, int status) inline;

;; $Barter$_contract_init
(cell, cell, cell, cell, cell, cell) $Barter$_contract_init() impure inline_ref;

;; $Barter$_contract_load
(cell, cell, cell, cell, cell, cell) $Barter$_contract_load() impure inline_ref;

;; $Barter$_contract_store
() $Barter$_contract_store((cell, cell, cell, cell, cell, cell) v) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $Barter$_fun_isMaster
((cell, cell, cell, cell, cell, cell), int) $Barter$_fun_isMaster((cell, cell, cell, cell, cell, cell) $self, slice $sender) impure inline_ref;

;; $Barter$_fun_Master
((cell, cell, cell, cell, cell, cell), cell) $Barter$_fun_Master((cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Barter$_fun_StatusMaster
((cell, cell, cell, cell, cell, cell), int) $Barter$_fun_StatusMaster((cell, cell, cell, cell, cell, cell) $self, slice $master, slice $sender) impure inline_ref;

;; $Barter$_fun_SendBottles
((cell, cell, cell, cell, cell, cell), cell) $Barter$_fun_SendBottles((cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Barter$_fun_TotalBottle
((cell, cell, cell, cell, cell, cell), int) $Barter$_fun_TotalBottle((cell, cell, cell, cell, cell, cell) $self, slice $address) impure inline_ref;

;; $Barter$_fun_BagProducts
((cell, cell, cell, cell, cell, cell), cell) $Barter$_fun_BagProducts((cell, cell, cell, cell, cell, cell) $self) impure inline_ref;

;; $Bags$_constructor_bags
((slice)) $Bags$_constructor_bags(slice bags) inline;

;; $Barter$_fun_currentBag
((cell, cell, cell, cell, cell, cell), (slice)) $Barter$_fun_currentBag((cell, cell, cell, cell, cell, cell) $self, slice $address) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $Barter$_fun_forward
((cell, cell, cell, cell, cell, cell), ()) $Barter$_fun_forward((cell, cell, cell, cell, cell, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $Barter$_fun_notify
((cell, cell, cell, cell, cell, cell), ()) $Barter$_fun_notify((cell, cell, cell, cell, cell, cell) $self, cell $body) impure inline;

;; $SendBottle$_constructor_name_masterAddress_senderAddress_total
((slice, slice, slice, int)) $SendBottle$_constructor_name_masterAddress_senderAddress_total(slice name, slice masterAddress, slice senderAddress, int total) inline;

;; $BagItem$_constructor_id_level_name_image_url_max_price
((int, int, slice, slice, int, int)) $BagItem$_constructor_id_level_name_image_url_max_price(int id, int level, slice name, slice image_url, int max, int price) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
